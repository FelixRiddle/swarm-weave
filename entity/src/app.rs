//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "app")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub name: String,
    pub path: Option<String>,
    #[sea_orm(column_name = "appType")]
    pub app_type: String,
    #[sea_orm(column_name = "createdAt")]
    pub created_at: Option<DateTime>,
    #[sea_orm(column_name = "updatedAt")]
    pub updated_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::app_output::Entity")]
    AppOutput,
    #[sea_orm(has_many = "super::group_app_junction::Entity")]
    GroupAppJunction,
    #[sea_orm(has_many = "super::tag_app_junction::Entity")]
    TagAppJunction,
}

impl Related<super::app_output::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AppOutput.def()
    }
}

impl Related<super::group_app_junction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupAppJunction.def()
    }
}

impl Related<super::tag_app_junction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TagAppJunction.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
